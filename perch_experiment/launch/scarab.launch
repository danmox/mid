<launch>

  <arg name="agent"                 default="$(env AGENT)"/>

  <arg name="type"                  default="none"/>
  <arg name="gdb"                   default="false"/>
  <arg name="record"                default="false"/>
  <arg name="relative_localization" default="true"/>
  <arg name="camera"                default="true"/>

  <arg name="map_frame"             default="$(arg agent)/map"/>
  <arg name="base_frame"            default="$(arg agent)/base_link"/>
  <arg name="odom_frame"            default="$(arg agent)/odom"/>
  <arg name="heading_frame"         default="$(arg agent)/heading_correction"/>
  <arg name="laser_frame"           default="$(arg agent)/laser"/>
  <arg name="camera_frame"          default="$(arg agent)/camera_link"/>
  <arg name="world_frame"           default="world"/>

  <!-- constructed args -->

  <arg name="id" value="$(eval arg('agent')[6:])"/>

  <arg name="task" value="true" if="$(eval arg('type') == 'task')"/>
  <arg name="task" value="false" unless="$(eval arg('type') == 'task')"/>
  <arg name="mid"  value="true" if="$(eval arg('type') == 'mid')"/>
  <arg name="mid"  value="false" unless="$(eval arg('type') == 'mid')"/>

  <arg name="launch_prefix" value="alacritty -e gdb --args" if="$(arg gdb)"/>
  <arg name="launch_prefix" value="" unless="$(arg gdb)"/>

  <!-- parameters -->

  <rosparam command="load"
            file="$(find perch_experiment)/config/heading_calibration.yaml"/>

  <!-- nodes -->

  <arg name="nav_laser_topic" value="scan_merged" if="$(arg camera)"/>
  <arg name="nav_laser_topic" value="scan" unless="$(arg camera)"/>

  <include file="$(find perch_experiment)/launch/navigation.launch">
    <arg name="agent"      value="$(arg agent)"/>
    <arg name="map_frame"  value="$(arg map_frame)"/>
    <arg name="base_frame" value="$(arg base_frame)"/>
    <arg name="odom_frame" value="$(arg odom_frame)"/>
    <arg name="nav_scan_topic" value="scan_merged"/>
    <arg name="map_xmin"   value="-20.0"/>
    <arg name="map_xmax"   value="20.0"/>
    <arg name="map_ymin"   value="-20.0"/>
    <arg name="map_ymax"   value="50.0"/>
    <arg name="hfn_config" value="$(find perch_experiment)/config/hfn.yaml"/>
  </include>

  <group ns="$(arg agent)">

    <!-- nodes for using the Asus Xtion depth camera to improve navigation
         obstacle avoidance performance -->
    <group if="$(arg camera)">

      <!-- asus xtion nodes -->
      <include file="$(find scarab)/launch/openni2_tf_prefix.launch">
        <arg name="camera"          value="camera"/>
        <arg name="tf_prefix"       value="$(arg agent)"/>
	      <arg name="id_manufacturer" value="1d27"/>
      </include>

      <!-- convert xtion camera pointcloud to laserscan to avoid obstacles the
           hokuyo misses -->
      <arg name="nodelet_name"
           value="pointcloud_to_laserscan/pointcloud_to_laserscan_nodelet"/>
      <node pkg="nodelet" type="nodelet" name="pointcloud_to_laserscan_nodelet"
            args="load $(arg nodelet_name) /$(arg agent)/camera/camera_nodelet_manager"
            output="screen">
        <param name="target_frame"    value="$(arg laser_frame)"/>
        <param name="min_height"      value="-0.20"/> <!-- base_link coincident laser, thus heights -->
        <param name="max_height"      value="1.0"/>   <!-- depend on laser's position relative to ground -->
        <param name="range_max"       value="4.0"/>   <!-- return Inf beyond this value -->
        <param name="use_inf"         value="true"/>
        <param name="angle_min"       value="-2.0987584590911865"/>  <!-- to match hokuyo: -120.25 deg -->
        <param name="angle_max"       value="2.0987584590911865"/>   <!-- to match hokuyo:  120.25 deg -->
        <param name="angle_increment" value="0.004363323096185923"/> <!-- to match hokuyo:    0.25 deg -->
        <remap from="cloud_in" to="camera/depth/points"/>
        <remap from="scan"     to="scan_xtion"/>
      </node>

      <!-- static transform between camera frame and laser frame -->
      <node pkg="tf2_ros"
            type="static_transform_publisher"
            name="camera_laser_static_tf_broadcaster"
            args="-0.1 0 0.11 0 0 0 $(arg laser_frame) $(arg camera_frame)"/>

      <!-- merge the laserscan coming from the hokuyo and xtion -->
      <node pkg="laserscan_merger" type="laserscan_merger" name="laserscan_merger"
            output="screen">
        <remap from="scan1" to="scan_xtion"/>
        <remap from="scan2" to="scan"/>
        <remap from="merged_scan" to="scan_merged"/>
      </node>

    </group>

    <!-- nodes for using VICON relative localizations between robots -->
    <group if="$(arg relative_localization)">

      <!-- computes the static transformation between the robot's starting point
           and the world frame provided by vicon -->
      <node name="relative_localization" pkg="relative_localization" type="rel_loc"
            output="screen" if="$(arg relative_localization)">
        <param name="vicon_base_frame"  value="$(arg heading_frame)"/>
        <param name="base_frame"        value="$(arg base_frame)"/>
        <param name="odom_frame"        value="$(arg odom_frame)"/>
        <param name="map_frame"         value="$(arg map_frame)"/>
        <param name="world_frame"       value="$(arg world_frame)"/>
      </node>

      <!-- static transform publisher to align vicon and gmapping headings -->
      <node name="heading_correction" pkg="relative_localization" type="heading_correction"
            output="screen" if="$(arg relative_localization)">
        <param name="parent_frame" value="$(arg agent)"/>
        <param name="child_frame"  value="$(arg heading_frame)"/>
        <param name="agent"        value="$(arg agent)"/>
      </node>

      <!-- vicon node to provide initial estimate of robot's position relative to
           the vicon world frame -->
      <arg name="model_list" value="['$(arg agent)']"/>
      <node pkg="mocap_vicon" type="mocap_vicon_node" name="vicon" output="screen"
            if="$(arg relative_localization)">
        <param name="server_address" value="mocap.perch"/>
        <param name="frame_rate"     value="100"/>
        <param name="max_accel"      value="10.0"/>
        <param name="publish_tf"     value="true"/>
        <param name="fixed_frame_id" value="$(arg world_frame)"/>
        <rosparam param="model_list" subst_value="True">$(arg model_list)</rosparam>
      </node>

    </group>

    <node name="frontier_exploration_node"
          pkg="frontier_exploration"
          type="frontier_exploration"
          output="screen"
          launch-prefix="$(arg launch_prefix)"
          if="$(arg task)">
      <param name="map_frame_id" value="$(arg map_frame)" />
    </node>

    <node name="mid_planner"
          pkg="or_planner"
          type="or_planner_node"
          output="screen"
          launch-prefix="$(arg launch_prefix)"
          if="$(arg mid)">
      <param name="robot_type"   value="$(arg type)"/>
      <param name="node_id"      value="$(arg id)"/>
      <param name="v_max"        value="0.5"/>   <!-- m/s -->
      <param name="w_max"        value="1.0"/>   <!-- rad/s -->
      <param name="heading_tol"  value="0.25"/>  <!-- ~15 deg -->
      <param name="position_tol" value="0.25"/>  <!-- m -->
      <remap from="status" to="/network_state"/>
    </node>

  </group>

  <node name="recorder" pkg="rosbag" type="record" output="screen"
        if="$(arg record)"
        args="record -o heading_calibration_$(arg id)
              /tf
              /scarab$(arg id)/map
              /scarab$(arg id)/pose
              /scarab$(arg id)/vicon/scarab$(arg id)/pose"/>

</launch>
